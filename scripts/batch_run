#!/bin/bash

help() {
    echo "Usage:"
    echo "    batch_run CONTAINER_COUNT [IMAGE_NAME] [-d|--destroy] [-h|--help] [-t|--tail]"
    echo "Options:"
    echo "    -d, --destroy     destroy the containers after run."
    echo "    -n, --no-build    do not build from current state, use image from last build."
    echo "        --no-remove   do not kill old running containers."
    echo "    -h, --help        display this help."
    echo "    -t, --tail        tail the logs of the containers."
    exit 2
}

SHRT=t,d,n,h
LONG=tail,destroy,no-build,no-remove,help
OPTS=$(getopt -a -n batch_run --options $SHRT --longoptions $LONG -- "$@")


# Check for existance of at least one argument.
if [ $# -eq 0 ]; then
    help
fi

# Remove '--' case.
eval set -- "$OPTS"

# Parse and handle options/flags.
while :
do
    case "$1" in
        -t | --tail)
            TAIL=true
            shift
            ;;
        -d | --destroy)
            DESTROY=true
            shift
            ;;
        -n | --no-build)
            NO_BUILD=true
            shift
            ;;
        --no-remove)
            NO_REMOVE=true
            shift
            ;;
        -h | --help)
            help
            ;;
        --)
            # Found positional arguments. Stop parsing options
            shift
            break
            ;;
        *)
            echo "Unexpected option: $1"
            help
            ;;
    esac
done

# Positional arguments.
SERVER_TYPE=$1
N=${2:-1}
IMAGE_NAME=${3:-'map-reduce:server'}
RAISE_CONTAINER='./scripts/run_container'


# Main logic.
## Kill previous?
if [ -z "$NO_REMOVE" ]
then
    echo 'Killing living containers...'
    './scripts/batch_kill' $IMAGE_NAME
fi

## Build image?
if [ -z "$NO_BUILD" ]
then
    echo 'Building image...'
    docker build ./ -t $IMAGE_NAME
fi

echo 'Starting containers...'
for k in $(seq 1 $N); do
    echo "Raising container $k of $N..."
    $RAISE_CONTAINER $SERVER_TYPE $(($k+1)) &> /dev/null &
    if [ "$k" -eq "1" ]; then
        sleep 1
    fi
done


# Handle cleanup.
if [ "$DESTROY" ]
then
    trap './scripts/batch_kill' EXIT
fi

if [ "$TAIL" ]
then
    sleep 2
    './scripts/batch_tail'
else
    sleep infinity
fi